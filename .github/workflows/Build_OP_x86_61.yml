name: Build_x86_61

on: 
  repository_dispatch:
  workflow_dispatch:

# 定时触发编译
  schedule:
    - cron: 30 16 * * *

# 点赞☆Star触发编译
#  watch:
#    types: [started]

jobs:
  Build_x86_61:
    runs-on: ubuntu-20.04
    steps:
    - name: Clone Repository
      uses: actions/checkout@v3

    - name: Initialization environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo timedatectl set-timezone "Asia/Shanghai" 
        sudo -E swapoff -a
        sudo -E rm -f /swapfile
        sudo -E docker image prune -a -f
        sudo -E snap set system refresh.retain=2
        sudo -E apt-get -y purge dotnet* firefox ghc* google* hhvm llvm* mono* mysql* openjdk* php* zulu*
        sudo -E apt-get -y autoremove --purge
        sudo -E rm -rf /usr/share/dotnet /usr/local/lib/android/sdk /etc/mysql /etc/php /usr/local/share/boost
        [ -n "$AGENT_TOOLSDIRECTORY" ] && sudo rm -rf "$AGENT_TOOLSDIRECTORY"
        sudo -E apt-get update -y
        sudo -E apt-get install -y $(curl -fsSL https://raw.githubusercontent.com/ysx88/ysx88/main/assets/depends)
        pip install aligo
        sudo -E apt-get clean
        git config --global user.name 'GitHub Actions' && git config --global user.email 'noreply@github.com'
        df -h
        
    - name: Clone source code
      env: 
        REPO_URL: https://github.com/xiangfeidexiaohuo/lede
        REPO_BRANCH: master
      run: |
        git clone --depth 1 $REPO_URL -b $REPO_BRANCH openwrt
        cd openwrt
        cp -f ../diy/lean/lean1.sh ./
        chmod +x ./lean1.sh && ./lean1.sh

    - name: Update & Install feeds
      working-directory: ./openwrt
      run: |
        ./scripts/feeds update -a

        ./scripts/feeds install -a

        cp -f ../diy/lean/lean2.sh ./        
        chmod +x ./lean2.sh && ./lean2.sh

        cp -f ../diy/lean/mt7921.sh ./        
        chmod +x ./mt7921.sh && ./mt7921.sh
        
        sed -i "s/KERNEL_PATCHVER:=*.*/KERNEL_PATCHVER:=6.1/g" target/linux/x86/Makefile
        sed -i "s/KERNEL_TESTING_PATCHVER:=*.*/KERNEL_TESTING_PATCHVER:=6.1/g" target/linux/x86/Makefile     
    
        sed -i "s/DISTRIB_DESCRIPTION='*.*'/DISTRIB_DESCRIPTION='OpenWrt-X86-$(date +%Y-%m-%d)'/g" package/lean/default-settings/files/zzz-default-settings

        
    - name: Configuration Customization - Build_x86_61
      env:
        CONFIG_FILE: './configs/X86/Full/x86_61.config'
      run: |
        [ -e $CONFIG_FILE ] && mv $CONFIG_FILE openwrt/.config
        cd openwrt && make defconfig
        
    - name: Download package
      working-directory: ./openwrt
      run: |
        make download -j$(nproc)
        find dl -size -1024c -exec ls -l {} \;
        find dl -size -1024c -exec rm -f {} \;

    - name: Build firmware
      working-directory: ./openwrt
      run: |
        make -j$(nproc) V=s

    - name: Assemble Artifact
      id: assemble_artifact
      run: |
        rm -rf ./X86_Out
        mkdir -p ./X86_Out/
        
        getmd5()
        {
        md5sum=`md5sum $1`
        md5=`echo ${md5sum% *}`
        md5=`echo ${md5:0:10}`
        }
        
        rom=openwrt/bin/targets/x86/64/openwrt-x86-64-generic-squashfs-combined-efi.img.gz
        getmd5 $rom
        
        cp -a $rom ./X86_Out/OpenWrt-X86_64-Full-6.1-$(date +%Y%m%d)_${md5}.img.gz
               
    - name: Upload Firmwares
      uses: actions/upload-artifact@main
      with:
        name: X86-OpenWrt-6.1
        path: X86_Out/*.img.gz

    - name: Upload config
      uses: actions/upload-artifact@main
      with:
        name: x86-6.1-config
        path: openwrt/.config
        
    - name: Upload Packages
      uses: actions/upload-artifact@main
      with:
        name: X86-Packages
        path: openwrt/bin/packages
        
    - name: Generate Tag & Release Name
      id: generate_name
      run: |
        PRODUCT_NAME="X86_64-全能版"
        release_tag="$PRODUCT_NAME"
        release_name="$(date "+%Y-%m-%d %H:%M:%S") X86_64-6.1-全能版"
        echo "release_name=$release_name" >> $GITHUB_OUTPUT
        echo "release_tag=$release_tag" >> $GITHUB_OUTPUT       

    - name: Create Release & Upload
      id: release
      uses: ncipollo/release-action@v1
      with:
        artifacts: X86_Out/*.img.gz 
        name: ${{ steps.generate_name.outputs.release_name }}
        tag: ${{ steps.generate_name.outputs.release_tag }}
        token: ${{ secrets.GH_TOKEN }}
